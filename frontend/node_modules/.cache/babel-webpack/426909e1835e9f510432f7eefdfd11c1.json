{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i1 from '@angular/router';\nimport { NavigationEnd, PRIMARY_OUTLET, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport * as i3 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i4 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nconst _c0 = function (a0) {\n  return {\n    \"font-size\": a0\n  };\n};\n\nconst _c1 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\n\nfunction Ng7MatBreadcrumbComponent_mat_list_1_span_3_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"routerLink\", item_r2 == null ? null : item_r2.url)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c0, ctx_r4.fontSize))(\"ngStyle\", i0.ɵɵpureFunction1(6, _c1, ctx_r4.fontColor));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r2.label);\n  }\n}\n\nfunction Ng7MatBreadcrumbComponent_mat_list_1_span_3_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx_r5.fontSize))(\"ngStyle\", i0.ɵɵpureFunction1(5, _c1, ctx_r5.lastLinkColor));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r2.label);\n  }\n}\n\nfunction Ng7MatBreadcrumbComponent_mat_list_1_span_3_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.symbol);\n  }\n}\n\nfunction Ng7MatBreadcrumbComponent_mat_list_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, Ng7MatBreadcrumbComponent_mat_list_1_span_3_a_1_Template, 2, 8, \"a\", 5);\n    i0.ɵɵtemplate(2, Ng7MatBreadcrumbComponent_mat_list_1_span_3_span_2_Template, 2, 7, \"span\", 6);\n    i0.ɵɵtemplate(3, Ng7MatBreadcrumbComponent_mat_list_1_span_3_span_3_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r2 == null ? null : item_r2.url);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(item_r2 == null ? null : item_r2.url));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.breadcrumb.length !== i_r3 + 1);\n  }\n}\n\nfunction Ng7MatBreadcrumbComponent_mat_list_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list\", 2);\n    i0.ɵɵelementStart(1, \"mat-list-item\");\n    i0.ɵɵelementStart(2, \"span\", 3);\n    i0.ɵɵtemplate(3, Ng7MatBreadcrumbComponent_mat_list_1_span_3_Template, 4, 3, \"span\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.breadcrumb);\n  }\n}\n\nconst _c2 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nclass Ng7MatBreadcrumbService {\n  constructor() {\n    this.breadcrumbLabels = new BehaviorSubject([]);\n    this.newBreadcrumb = new BehaviorSubject([]);\n  }\n\n  updateBreadcrumbLabels(labels) {\n    this.breadcrumbLabels.next(labels);\n  }\n\n  updateBreadcrumb(newBreadcrumb) {\n    this.newBreadcrumb.next(newBreadcrumb);\n  }\n\n}\n\nNg7MatBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbService,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nNg7MatBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbService,\n  providedIn: 'root'\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbService,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }],\n  ctorParameters: function () {\n    return [];\n  }\n});\n\nclass Ng7MatBreadcrumbComponent {\n  constructor(activatedRoute, router, ng7MatBreadcrumbService) {\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;\n    this.breadcrumb = [];\n    this.bgColor = '#eee';\n    this.fontSize = '18px';\n    this.fontColor = '#0275d8';\n    this.lastLinkColor = '#000';\n    this.symbol = ' / ';\n    this.breadCrumbData();\n  }\n\n  ngOnInit() {\n    this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe(labelData => {\n      for (const label in labelData) {\n        if (labelData.hasOwnProperty(label)) {\n          this.breadcrumb.map(crumb => {\n            const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n\n            if (labelParams) {\n              for (const labelParam of labelParams) {\n                const dynamicData = labelData[label];\n\n                if (labelParam === label) {\n                  crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);\n                }\n              }\n            }\n          });\n        }\n      }\n    });\n    this.ng7MatBreadcrumbService.newBreadcrumb.subscribe(breadcrumb => {\n      if (breadcrumb.length > 0) {\n        this.updateData(this.activatedRoute, breadcrumb);\n      }\n    });\n  }\n\n  breadCrumbData() {\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).pipe(map(() => this.activatedRoute)).pipe(map(route => {\n      while (route.firstChild) {\n        route = route.firstChild;\n      }\n\n      return route;\n    })).pipe(filter(route => route.outlet === PRIMARY_OUTLET)).subscribe(route => {\n      this.params = route.snapshot.params;\n      this.updateData(route, null);\n    });\n  }\n\n  updateData(route, newBreadcrumb) {\n    if (route.snapshot.data.breadcrumb || newBreadcrumb) {\n      const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;\n      const breadcrumb = JSON.parse(JSON.stringify(data));\n      breadcrumb.map(crumb => {\n        const urlChunks = crumb.url.split('/');\n\n        for (const chunk of urlChunks) {\n          if (chunk.includes(':')) {\n            const paramID = chunk.replace(':', ''); // const routerParamID = route.snapshot.params[paramID];\n\n            const routerParamID = this.params[paramID];\n            crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);\n          }\n        }\n\n        const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n\n        if (labelParams) {\n          for (const labelParam of labelParams) {\n            // const routerParamID = route.snapshot.params[labelParam.trim()];\n            const routerParamID = this.params[labelParam.trim()];\n\n            if (routerParamID) {\n              crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);\n            } else {// crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');\n            }\n          }\n        }\n      });\n      this.breadcrumb = breadcrumb;\n    } else {\n      this.breadcrumb = [];\n    }\n  }\n\n}\n\nNg7MatBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbComponent,\n  deps: [{\n    token: i1.ActivatedRoute\n  }, {\n    token: i1.Router\n  }, {\n    token: Ng7MatBreadcrumbService\n  }],\n  target: i0.ɵɵFactoryTarget.Component\n});\nNg7MatBreadcrumbComponent.ɵcmp = i0.ɵɵdefineComponent({\n  type: Ng7MatBreadcrumbComponent,\n  selectors: [[\"app-ng7-mat-breadcrumb\"]],\n  inputs: {\n    bgColor: \"bgColor\",\n    fontSize: \"fontSize\",\n    fontColor: \"fontColor\",\n    lastLinkColor: \"lastLinkColor\",\n    symbol: \"symbol\"\n  },\n  decls: 2,\n  vars: 4,\n  consts: [[1, \"mat-bread-crumb\", 3, \"ngStyle\"], [\"class\", \"mat-bread-crumb-list\", 4, \"ngIf\"], [1, \"mat-bread-crumb-list\"], [1, \"mat-bread-crumb-spacer\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"mat-bread-crumb-list-item\", 3, \"routerLink\", \"ngStyle\", 4, \"ngIf\"], [\"class\", \"mat-bread-crumb-list-item\", 3, \"ngStyle\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-bread-crumb-list-item\", 3, \"routerLink\", \"ngStyle\"], [1, \"mat-bread-crumb-list-item\", 3, \"ngStyle\"]],\n  template: function Ng7MatBreadcrumbComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-toolbar\", 0);\n      i0.ɵɵtemplate(1, Ng7MatBreadcrumbComponent_mat_list_1_Template, 4, 1, \"mat-list\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c2, ctx.bgColor));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.breadcrumb.length);\n    }\n  },\n  directives: [i5.NgStyle, i5.NgIf, i5.NgForOf, i1.RouterLinkWithHref],\n  styles: [\".mat-bread-crumb[_ngcontent-%COMP%]{height:30px;background-color:#f1efeb}.mat-bread-crumb-list[_ngcontent-%COMP%]{padding-bottom:10px}.mat-bread-crumb-list-item[_ngcontent-%COMP%]{font-size:15px}.mat-bread-crumb-spacer[_ngcontent-%COMP%]{margin-left:-20px}\"]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line: component-selector\n      selector: 'app-ng7-mat-breadcrumb',\n      templateUrl: './ng7-mat-breadcrumb.component.html',\n      styleUrls: ['./ng7-mat-breadcrumb.component.css']\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i1.ActivatedRoute\n    }, {\n      type: i1.Router\n    }, {\n      type: Ng7MatBreadcrumbService\n    }];\n  },\n  propDecorators: {\n    bgColor: [{\n      type: Input\n    }],\n    fontSize: [{\n      type: Input\n    }],\n    fontColor: [{\n      type: Input\n    }],\n    lastLinkColor: [{\n      type: Input\n    }],\n    symbol: [{\n      type: Input\n    }]\n  }\n});\n\nclass Ng7MatBreadcrumbModule {}\n\nNg7MatBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nNg7MatBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbModule,\n  declarations: [Ng7MatBreadcrumbComponent],\n  imports: [RouterModule, CommonModule, BrowserAnimationsModule, MatToolbarModule, MatListModule],\n  exports: [Ng7MatBreadcrumbComponent]\n});\nNg7MatBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbModule,\n  imports: [[RouterModule, CommonModule, BrowserAnimationsModule, MatToolbarModule, MatListModule]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.1.1\",\n  ngImport: i0,\n  type: Ng7MatBreadcrumbModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [Ng7MatBreadcrumbComponent],\n      imports: [RouterModule, CommonModule, BrowserAnimationsModule, MatToolbarModule, MatListModule],\n      exports: [Ng7MatBreadcrumbComponent]\n    }]\n  }]\n});\n/*\r\n * Public API Surface of ng7-mat-breadcrumb\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { Ng7MatBreadcrumbComponent, Ng7MatBreadcrumbModule, Ng7MatBreadcrumbService }; //# sourceMappingURL=ng7-mat-breadcrumb.js.map","map":{"version":3,"sources":["C:/Users/MouNa/Desktop/webApp/frontend/node_modules/ng7-mat-breadcrumb/fesm2015/ng7-mat-breadcrumb.js","C:/Users/MouNa/Desktop/webApp/frontend/projects/ng7-mat-breadcrumb/src/lib/ng7-mat-breadcrumb.component.html"],"names":["i0","Injectable","Component","Input","NgModule","BehaviorSubject","i1","NavigationEnd","PRIMARY_OUTLET","RouterModule","filter","map","i3","MatToolbarModule","i4","MatListModule","i5","CommonModule","BrowserAnimationsModule","Ng7MatBreadcrumbService","constructor","breadcrumbLabels","newBreadcrumb","updateBreadcrumbLabels","labels","next","updateBreadcrumb","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","target","ɵɵFactoryTarget","ɵprov","ɵɵngDeclareInjectable","providedIn","ɵɵngDeclareClassMetadata","decorators","args","ctorParameters","Ng7MatBreadcrumbComponent","activatedRoute","router","ng7MatBreadcrumbService","breadcrumb","bgColor","fontSize","fontColor","lastLinkColor","symbol","breadCrumbData","ngOnInit","subscribe","labelData","label","hasOwnProperty","crumb","labelParams","match","labelParam","dynamicData","replace","length","updateData","events","pipe","event","route","firstChild","outlet","params","snapshot","data","JSON","parse","stringify","urlChunks","url","split","chunk","includes","paramID","routerParamID","trim","token","ActivatedRoute","Router","ɵcmp","NgStyle","NgIf","NgForOf","RouterLinkWithHref","selector","templateUrl","styleUrls","propDecorators","Ng7MatBreadcrumbModule","ɵmod","ɵɵngDeclareNgModule","declarations","imports","exports","ɵinj","ɵɵngDeclareInjector"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i1 from '@angular/router';\nimport { NavigationEnd, PRIMARY_OUTLET, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport * as i3 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i4 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nclass Ng7MatBreadcrumbService {\r\n    constructor() {\r\n        this.breadcrumbLabels = new BehaviorSubject([]);\r\n        this.newBreadcrumb = new BehaviorSubject([]);\r\n    }\r\n    updateBreadcrumbLabels(labels) {\r\n        this.breadcrumbLabels.next(labels);\r\n    }\r\n    updateBreadcrumb(newBreadcrumb) {\r\n        this.newBreadcrumb.next(newBreadcrumb);\r\n    }\r\n}\r\nNg7MatBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNg7MatBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass Ng7MatBreadcrumbComponent {\r\n    constructor(activatedRoute, router, ng7MatBreadcrumbService) {\r\n        this.activatedRoute = activatedRoute;\r\n        this.router = router;\r\n        this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;\r\n        this.breadcrumb = [];\r\n        this.bgColor = '#eee';\r\n        this.fontSize = '18px';\r\n        this.fontColor = '#0275d8';\r\n        this.lastLinkColor = '#000';\r\n        this.symbol = ' / ';\r\n        this.breadCrumbData();\r\n    }\r\n    ngOnInit() {\r\n        this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {\r\n            for (const label in labelData) {\r\n                if (labelData.hasOwnProperty(label)) {\r\n                    this.breadcrumb.map((crumb) => {\r\n                        const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\r\n                        if (labelParams) {\r\n                            for (const labelParam of labelParams) {\r\n                                const dynamicData = labelData[label];\r\n                                if (labelParam === label) {\r\n                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        this.ng7MatBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {\r\n            if (breadcrumb.length > 0) {\r\n                this.updateData(this.activatedRoute, breadcrumb);\r\n            }\r\n        });\r\n    }\r\n    breadCrumbData() {\r\n        this.router.events\r\n            .pipe(filter(event => event instanceof NavigationEnd))\r\n            .pipe(map(() => this.activatedRoute))\r\n            .pipe(map((route) => {\r\n            while (route.firstChild) {\r\n                route = route.firstChild;\r\n            }\r\n            return route;\r\n        }))\r\n            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))\r\n            .subscribe(route => {\r\n            this.params = route.snapshot.params;\r\n            this.updateData(route, null);\r\n        });\r\n    }\r\n    updateData(route, newBreadcrumb) {\r\n        if (route.snapshot.data.breadcrumb || newBreadcrumb) {\r\n            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;\r\n            const breadcrumb = (JSON.parse(JSON.stringify(data)));\r\n            breadcrumb.map((crumb) => {\r\n                const urlChunks = crumb.url.split('/');\r\n                for (const chunk of urlChunks) {\r\n                    if (chunk.includes(':')) {\r\n                        const paramID = chunk.replace(':', '');\r\n                        // const routerParamID = route.snapshot.params[paramID];\r\n                        const routerParamID = this.params[paramID];\r\n                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);\r\n                    }\r\n                }\r\n                const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\r\n                if (labelParams) {\r\n                    for (const labelParam of labelParams) {\r\n                        // const routerParamID = route.snapshot.params[labelParam.trim()];\r\n                        const routerParamID = this.params[labelParam.trim()];\r\n                        if (routerParamID) {\r\n                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);\r\n                        }\r\n                        else {\r\n                            // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            this.breadcrumb = breadcrumb;\r\n        }\r\n        else {\r\n            this.breadcrumb = [];\r\n        }\r\n    }\r\n}\r\nNg7MatBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: Ng7MatBreadcrumbService }], target: i0.ɵɵFactoryTarget.Component });\r\nNg7MatBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.1\", type: Ng7MatBreadcrumbComponent, selector: \"app-ng7-mat-breadcrumb\", inputs: { bgColor: \"bgColor\", fontSize: \"fontSize\", fontColor: \"fontColor\", lastLinkColor: \"lastLinkColor\", symbol: \"symbol\" }, ngImport: i0, template: \"<mat-toolbar class=\\\"mat-bread-crumb\\\" [ngStyle]=\\\"{'background-color': bgColor}\\\">\\r\\n    <mat-list class=\\\"mat-bread-crumb-list\\\" *ngIf=\\\"breadcrumb.length\\\">\\r\\n        <mat-list-item>\\r\\n            <span class=\\\"mat-bread-crumb-spacer\\\">\\r\\n                <span *ngFor=\\\"let item of breadcrumb; let i = index\\\">\\r\\n                    <a *ngIf=\\\"item?.url\\\" [routerLink]=\\\"item?.url\\\" class=\\\"mat-bread-crumb-list-item\\\" [ngStyle]=\\\"{'font-size': fontSize}\\\" [ngStyle]=\\\"{'color': fontColor}\\\">{{ item.label }}</a>\\r\\n                    <span *ngIf=\\\"!item?.url\\\" class=\\\"mat-bread-crumb-list-item\\\" [ngStyle]=\\\"{'font-size': fontSize}\\\"  [ngStyle]=\\\"{'color': lastLinkColor}\\\">{{ item.label }}</span>\\r\\n                    <span *ngIf=\\\"breadcrumb.length !== i+1\\\">{{symbol}}</span>\\r\\n                </span>\\r\\n            </span>\\r\\n        </mat-list-item>\\r\\n    </mat-list>\\r\\n</mat-toolbar>\", styles: [\".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}\"], components: [{ type: i3.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { type: i4.MatList, selector: \"mat-list, mat-action-list\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matList\"] }, { type: i4.MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: [\"disableRipple\", \"disabled\"], exportAs: [\"matListItem\"] }], directives: [{ type: i5.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    // tslint:disable-next-line: component-selector\r\n                    selector: 'app-ng7-mat-breadcrumb',\r\n                    templateUrl: './ng7-mat-breadcrumb.component.html',\r\n                    styleUrls: ['./ng7-mat-breadcrumb.component.css']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: Ng7MatBreadcrumbService }]; }, propDecorators: { bgColor: [{\r\n                type: Input\r\n            }], fontSize: [{\r\n                type: Input\r\n            }], fontColor: [{\r\n                type: Input\r\n            }], lastLinkColor: [{\r\n                type: Input\r\n            }], symbol: [{\r\n                type: Input\r\n            }] } });\n\nclass Ng7MatBreadcrumbModule {\r\n}\r\nNg7MatBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNg7MatBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbModule, declarations: [Ng7MatBreadcrumbComponent], imports: [RouterModule,\r\n        CommonModule,\r\n        BrowserAnimationsModule,\r\n        MatToolbarModule,\r\n        MatListModule], exports: [Ng7MatBreadcrumbComponent] });\r\nNg7MatBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbModule, imports: [[\r\n            RouterModule,\r\n            CommonModule,\r\n            BrowserAnimationsModule,\r\n            MatToolbarModule,\r\n            MatListModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.1\", ngImport: i0, type: Ng7MatBreadcrumbModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [Ng7MatBreadcrumbComponent],\r\n                    imports: [\r\n                        RouterModule,\r\n                        CommonModule,\r\n                        BrowserAnimationsModule,\r\n                        MatToolbarModule,\r\n                        MatListModule\r\n                    ],\r\n                    exports: [Ng7MatBreadcrumbComponent]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ng7-mat-breadcrumb\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { Ng7MatBreadcrumbComponent, Ng7MatBreadcrumbModule, Ng7MatBreadcrumbService };\n//# sourceMappingURL=ng7-mat-breadcrumb.js.map\n",null]},"metadata":{},"sourceType":"module"}