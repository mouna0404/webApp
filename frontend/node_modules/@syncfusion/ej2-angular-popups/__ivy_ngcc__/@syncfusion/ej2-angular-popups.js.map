{"version":3,"file":"ej2-angular-popups.js","sources":["~/@syncfusion/ej2-angular-popups/src/dialog/buttons.directive.ts","~/@syncfusion/ej2-angular-popups/src/dialog/dialog.component.ts","~/@syncfusion/ej2-angular-popups/src/dialog/dialog.module.ts","~/@syncfusion/ej2-angular-popups/src/dialog/dialog-all.module.ts","~/@syncfusion/ej2-angular-popups/src/tooltip/tooltip.component.ts","~/@syncfusion/ej2-angular-popups/src/tooltip/tooltip.module.ts","~/@syncfusion/ej2-angular-popups/src/tooltip/tooltip-all.module.ts","~/@syncfusion/ej2-angular-popups/ej2-angular-popups.ts"],"names":["outputs","inputs","twoWays","__decorate","__metadata"],"mappings":"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","sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['buttonModel', 'isFlat', 'type'];\nlet /** @type {?} */ outputs: string[] = ['click'];\n/**\n * 'e-button' directive represent a button of angular dialog \n * It must be contained in a Dialog component(`ej-dialog`). \n * ```html\n * <ejs-dialog id='dialog' showCloseIcon=true> \n *   <e-buttons>\n *    <e-dialogbutton [buttonModal]='okButton'></e-button>\n *    <e-dialogbutton [buttonModal]='cancelButton'></e-button>\n *   </e-buttons>\n * </ejs-dialog>\n * ```\n */\nexport class DialogButtonDirective extends ComplexBase<DialogButtonDirective> {\npublic directivePropList: any;\npublic click: any;\n/**\n * Specify the type of the button. \n * Possible values are Button, Submit and Reset.\n * \\@default 'Button'\n * \\@asptype string\n * \\@blazortype string\n */\npublic type: any;\n/**\n * Specifies the button component properties to render the dialog buttons.\n */\npublic buttonModel: any;\n/**\n * Specifies the flat appearance of the dialog buttons\n * \\@default true\n */\npublic isFlat: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-buttons>e-dialogbutton',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction DialogButtonDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogButtonDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogButtonDirective.ctorParameters;\n/** @type {?} */\nDialogButtonDirective.prototype.directivePropList;\n/** @type {?} */\nDialogButtonDirective.prototype.click;\n/**\n * Specify the type of the button. \n * Possible values are Button, Submit and Reset.\n * \\@default 'Button'\n * \\@asptype string\n * \\@blazortype string\n * @type {?}\n */\nDialogButtonDirective.prototype.type;\n/**\n * Specifies the button component properties to render the dialog buttons.\n * @type {?}\n */\nDialogButtonDirective.prototype.buttonModel;\n/**\n * Specifies the flat appearance of the dialog buttons\n * \\@default true\n * @type {?}\n */\nDialogButtonDirective.prototype.isFlat;\n/** @type {?} */\nDialogButtonDirective.prototype.viewContainerRef;\n}\n\n/**\n * DialogButton Array Directive\n */\nexport class ButtonsDirective extends ArrayBase<ButtonsDirective> {\nconstructor() {\n        super('buttons');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-dialog>e-buttons',\n    queries: {\n        children: new ContentChildren(DialogButtonDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ButtonsDirective } from './buttons.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowDragging','animationSettings','buttons','closeOnEscape','content','cssClass','enableHtmlSanitizer','enablePersistence','enableResize','enableRtl','footerTemplate','header','height','isModal','locale','minHeight','position','resizeHandles','showCloseIcon','target','visible','width','zIndex'];\nexport const /** @type {?} */ outputs: string[] = ['beforeClose','beforeOpen','beforeSanitizeHtml','close','created','destroyed','drag','dragStart','dragStop','open','overlayClick','resizeStart','resizeStop','resizing','visibleChange'];\nexport const /** @type {?} */ twoWays: string[] = ['visible'];\n/**\n * Represents the Angular Dialog Component\n * ```html\n * <ejs-dialog></ejs-dialog>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class DialogComponent extends Dialog implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\n\tbeforeClose: any;\n\tbeforeOpen: any;\n\tbeforeSanitizeHtml: any;\n\tclose: any;\n\tcreated: any;\n\tdestroyed: any;\n\tdrag: any;\n\tdragStart: any;\n\tdragStop: any;\n\topen: any;\n\toverlayClick: any;\n\tresizeStart: any;\n\tresizeStop: any;\n\tresizing: any;\npublic visibleChange: any;\npublic childButtons: QueryList<ButtonsDirective>;\npublic tags: string[] = ['buttons'];\n/**\n * Specifies the template value that can be displayed with dialog's footer area. \n * This is optional property and can be used only when the footer is occupied with information or custom components. \n * By default, the footer is configured with action [buttons](#buttons). \n * If footer template is configured to dialog, the action buttons property will be disabled.\n * \n * > More information on the footer template configuration can be found on this [documentation](../../dialog/template/#footer) section.\n *     \n * \\@default ''\n * \\@blazortype string\n */\n@Template()\n    public footerTemplate: any;\n/**\n * Specifies the value that can be displayed in the dialog's title area that can be configured with plain text or HTML elements. \n * This is optional property and the dialog can be displayed without header, if the header property is null.\n * \\@default ''\n * \\@blazortype string\n */\n@Template()\n    public header: any;\n/**\n * Specifies the value that can be displayed in dialog's content area. \n * It can be information, list, or other HTML elements. \n * The content of dialog can be loaded with dynamic data such as database, AJAX content, and more.\n * \n * {% codeBlock src=\"dialog/content-api/index.ts\" %}{% endcodeBlock %}\n * \n * {% codeBlock src=\"dialog/content-api/index.html\" %}{% endcodeBlock %}\n *     \n * \\@default ''\n * \\@blazortype string\n */\n@Template()\n    public content: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childButtons;\n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-dialog',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content ></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childButtons: new ContentChild(ButtonsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'footerTemplate': [{ type: ContentChild, args: ['footerTemplate', ] },],\n'header': [{ type: ContentChild, args: ['header', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction DialogComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogComponent.ctorParameters;\n/** @type {?} */\nDialogComponent.propDecorators;\n/** @type {?} */\nDialogComponent.prototype.containerContext;\n/** @type {?} */\nDialogComponent.prototype.tagObjects;\n/** @type {?} */\nDialogComponent.prototype.beforeClose;\n/** @type {?} */\nDialogComponent.prototype.beforeOpen;\n/** @type {?} */\nDialogComponent.prototype.beforeSanitizeHtml;\n/** @type {?} */\nDialogComponent.prototype.close;\n/** @type {?} */\nDialogComponent.prototype.created;\n/** @type {?} */\nDialogComponent.prototype.destroyed;\n/** @type {?} */\nDialogComponent.prototype.drag;\n/** @type {?} */\nDialogComponent.prototype.dragStart;\n/** @type {?} */\nDialogComponent.prototype.dragStop;\n/** @type {?} */\nDialogComponent.prototype.open;\n/** @type {?} */\nDialogComponent.prototype.overlayClick;\n/** @type {?} */\nDialogComponent.prototype.resizeStart;\n/** @type {?} */\nDialogComponent.prototype.resizeStop;\n/** @type {?} */\nDialogComponent.prototype.resizing;\n/** @type {?} */\nDialogComponent.prototype.visibleChange;\n/** @type {?} */\nDialogComponent.prototype.childButtons;\n/** @type {?} */\nDialogComponent.prototype.tags;\n/**\n * Specifies the template value that can be displayed with dialog's footer area. \n * This is optional property and can be used only when the footer is occupied with information or custom components. \n * By default, the footer is configured with action [buttons](#buttons). \n * If footer template is configured to dialog, the action buttons property will be disabled.\n * \n * > More information on the footer template configuration can be found on this [documentation](../../dialog/template/#footer) section.\n *     \n * \\@default ''\n * \\@blazortype string\n * @type {?}\n */\nDialogComponent.prototype.footerTemplate;\n/**\n * Specifies the value that can be displayed in the dialog's title area that can be configured with plain text or HTML elements. \n * This is optional property and the dialog can be displayed without header, if the header property is null.\n * \\@default ''\n * \\@blazortype string\n * @type {?}\n */\nDialogComponent.prototype.header;\n/**\n * Specifies the value that can be displayed in dialog's content area. \n * It can be information, list, or other HTML elements. \n * The content of dialog can be loaded with dynamic data such as database, AJAX content, and more.\n * \n * {% codeBlock src=\"dialog/content-api/index.ts\" %}{% endcodeBlock %}\n * \n * {% codeBlock src=\"dialog/content-api/index.html\" %}{% endcodeBlock %}\n *     \n * \\@default ''\n * \\@blazortype string\n * @type {?}\n */\nDialogComponent.prototype.content;\n/** @type {?} */\nDialogComponent.prototype.registerEvents;\n/** @type {?} */\nDialogComponent.prototype.addTwoWay;\n/** @type {?} */\nDialogComponent.prototype.ngEle;\n/** @type {?} */\nDialogComponent.prototype.srenderer;\n/** @type {?} */\nDialogComponent.prototype.viewContainerRef;\n/** @type {?} */\nDialogComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DialogButtonDirective, ButtonsDirective } from './buttons.directive';\nimport { DialogComponent } from './dialog.component';\n/**\n * NgModule definition for the Dialog component.\n */\nexport class DialogModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        DialogComponent,\n        DialogButtonDirective,\n        ButtonsDirective\n    ],\n    exports: [\n        DialogComponent,\n        DialogButtonDirective,\n        ButtonsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DialogButtonDirective, ButtonsDirective } from './buttons.directive';\nimport { DialogComponent } from './dialog.component';\nimport { DialogModule } from './dialog.module';\n/**\n * NgModule definition for the Dialog component with providers.\n */\nexport class DialogAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, DialogModule],\n    exports: [\n        DialogModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nexport const /** @type {?} */ inputs: string[] = ['animation','closeDelay','content','cssClass','enableHtmlParse','enableHtmlSanitizer','enablePersistence','enableRtl','height','isSticky','locale','mouseTrail','offsetX','offsetY','openDelay','opensOn','position','showTipPointer','target','tipPointerPosition','width','windowCollision'];\nexport const /** @type {?} */ outputs: string[] = ['afterClose','afterOpen','beforeClose','beforeCollision','beforeOpen','beforeRender','created','destroyed'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Tooltip component that displays a piece of information about the target element on mouse hover.\n * ```html\n * <ejs-tooltip content='Tooltip content'>Show Tooltip</ejs-tooltip>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class TooltipComponent extends Tooltip implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\n\tafterClose: any;\n\tafterOpen: any;\n\tbeforeClose: any;\n\tbeforeCollision: any;\n\tbeforeOpen: any;\n\tbeforeRender: any;\n\tcreated: any;\npublic destroyed: any;\n/**\n * It is used to display the content of Tooltip which can be both string and HTML Elements. \n * Refer the documentation [here](https://ej2.syncfusion.com/documentation/tooltip/content/) \n *  to know more about this property with demo.\n * \n * {% codeBlock src=\"tooltip/content-api/index.ts\" %}{% endcodeBlock %}\n * \n * \n */\n@Template()\n    public content: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-tooltip',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content ></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/** @type {?} */\nTooltipComponent.propDecorators;\n/** @type {?} */\nTooltipComponent.prototype.containerContext;\n/** @type {?} */\nTooltipComponent.prototype.tagObjects;\n/** @type {?} */\nTooltipComponent.prototype.afterClose;\n/** @type {?} */\nTooltipComponent.prototype.afterOpen;\n/** @type {?} */\nTooltipComponent.prototype.beforeClose;\n/** @type {?} */\nTooltipComponent.prototype.beforeCollision;\n/** @type {?} */\nTooltipComponent.prototype.beforeOpen;\n/** @type {?} */\nTooltipComponent.prototype.beforeRender;\n/** @type {?} */\nTooltipComponent.prototype.created;\n/** @type {?} */\nTooltipComponent.prototype.destroyed;\n/**\n * It is used to display the content of Tooltip which can be both string and HTML Elements. \n * Refer the documentation [here](https://ej2.syncfusion.com/documentation/tooltip/content/) \n *  to know more about this property with demo.\n * \n * {% codeBlock src=\"tooltip/content-api/index.ts\" %}{% endcodeBlock %}\n * \n * \n * @type {?}\n */\nTooltipComponent.prototype.content;\n/** @type {?} */\nTooltipComponent.prototype.registerEvents;\n/** @type {?} */\nTooltipComponent.prototype.addTwoWay;\n/** @type {?} */\nTooltipComponent.prototype.ngEle;\n/** @type {?} */\nTooltipComponent.prototype.srenderer;\n/** @type {?} */\nTooltipComponent.prototype.viewContainerRef;\n/** @type {?} */\nTooltipComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TooltipComponent } from './tooltip.component';\n/**\n * NgModule definition for the Tooltip component.\n */\nexport class TooltipModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        TooltipComponent\n    ],\n    exports: [\n        TooltipComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipModule } from './tooltip.module';\n/**\n * NgModule definition for the Tooltip component with providers.\n */\nexport class TooltipAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, TooltipModule],\n    exports: [\n        TooltipModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {DialogButtonDirective,ButtonsDirective,DialogComponent,DialogModule,DialogAllModule,TooltipComponent,TooltipModule,TooltipAllModule,PositionData,CollisionAxis,CollisionType,ActionOnScrollType,TargetType,Popup,getScrollableParent,getZindexPartial,getMaxZindex,PositionDataModel,PopupModel,calculateRelativeBasedPosition,calculatePosition,OffsetPosition,CollisionCoordinates,fit,isCollide,flip,ButtonType,SanitizeSelectors,BeforeSanitizeHtmlArgs,SanitizeRemoveAttrs,ButtonProps,AnimationSettings,DialogEffect,ResizeDirections,BeforeOpenEventArgs,BeforeCloseEventArgs,OpenEventArgs,CloseEventArgs,DragStartEventArgs,DragStopEventArgs,DragEventArgs,Dialog,DialogUtility,ButtonArgs,AlertDialogArgs,ConfirmDialogArgs,ButtonPropsModel,AnimationSettingsModel,DialogModel,OpenMode,Position,TipPointerPosition,Effect,TooltipEventArgs,TooltipAnimationSettings,Animation,Tooltip,AnimationModel,TooltipModel,createElementParams,SpinnerType,Spinner,createSpinner,showSpinner,hideSpinner,setSpinner,SpinnerArgs,SetSpinnerArgs,SetArgs,CreateArgs} from './public_api';\n\nexport {inputs as ɵa,outputs as ɵb} from './src/dialog/dialog.component';\nexport {inputs as ɵc,outputs as ɵd} from './src/tooltip/tooltip.component';"]}