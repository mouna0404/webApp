import { Component, Input } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./ng7-mat-breadcrumb.service";
import * as i3 from "@angular/material/toolbar";
import * as i4 from "@angular/material/list";
import * as i5 from "@angular/common";
export class Ng7MatBreadcrumbComponent {
    constructor(activatedRoute, router, ng7MatBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;
        this.breadcrumb = [];
        this.bgColor = '#eee';
        this.fontSize = '18px';
        this.fontColor = '#0275d8';
        this.lastLinkColor = '#000';
        this.symbol = ' / ';
        this.breadCrumbData();
    }
    ngOnInit() {
        this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {
            for (const label in labelData) {
                if (labelData.hasOwnProperty(label)) {
                    this.breadcrumb.map((crumb) => {
                        const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            for (const labelParam of labelParams) {
                                const dynamicData = labelData[label];
                                if (labelParam === label) {
                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);
                                }
                            }
                        }
                    });
                }
            }
        });
        this.ng7MatBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {
            if (breadcrumb.length > 0) {
                this.updateData(this.activatedRoute, breadcrumb);
            }
        });
    }
    breadCrumbData() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .pipe(map(() => this.activatedRoute))
            .pipe(map((route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))
            .subscribe(route => {
            this.params = route.snapshot.params;
            this.updateData(route, null);
        });
    }
    updateData(route, newBreadcrumb) {
        if (route.snapshot.data.breadcrumb || newBreadcrumb) {
            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;
            const breadcrumb = (JSON.parse(JSON.stringify(data)));
            breadcrumb.map((crumb) => {
                const urlChunks = crumb.url.split('/');
                for (const chunk of urlChunks) {
                    if (chunk.includes(':')) {
                        const paramID = chunk.replace(':', '');
                        // const routerParamID = route.snapshot.params[paramID];
                        const routerParamID = this.params[paramID];
                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                    }
                }
                const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                if (labelParams) {
                    for (const labelParam of labelParams) {
                        // const routerParamID = route.snapshot.params[labelParam.trim()];
                        const routerParamID = this.params[labelParam.trim()];
                        if (routerParamID) {
                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                        }
                        else {
                            // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');
                        }
                    }
                }
            });
            this.breadcrumb = breadcrumb;
        }
        else {
            this.breadcrumb = [];
        }
    }
}
Ng7MatBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: Ng7MatBreadcrumbComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.Ng7MatBreadcrumbService }], target: i0.ɵɵFactoryTarget.Component });
Ng7MatBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.1", type: Ng7MatBreadcrumbComponent, selector: "app-ng7-mat-breadcrumb", inputs: { bgColor: "bgColor", fontSize: "fontSize", fontColor: "fontColor", lastLinkColor: "lastLinkColor", symbol: "symbol" }, ngImport: i0, template: "<mat-toolbar class=\"mat-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\r\n    <mat-list class=\"mat-bread-crumb-list\" *ngIf=\"breadcrumb.length\">\r\n        <mat-list-item>\r\n            <span class=\"mat-bread-crumb-spacer\">\r\n                <span *ngFor=\"let item of breadcrumb; let i = index\">\r\n                    <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" class=\"mat-bread-crumb-list-item\" [ngStyle]=\"{'font-size': fontSize}\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\r\n                    <span *ngIf=\"!item?.url\" class=\"mat-bread-crumb-list-item\" [ngStyle]=\"{'font-size': fontSize}\"  [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\r\n                    <span *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\r\n                </span>\r\n            </span>\r\n        </mat-list-item>\r\n    </mat-list>\r\n</mat-toolbar>", styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"], components: [{ type: i3.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { type: i4.MatList, selector: "mat-list, mat-action-list", inputs: ["disableRipple", "disabled"], exportAs: ["matList"] }, { type: i4.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["disableRipple", "disabled"], exportAs: ["matListItem"] }], directives: [{ type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: Ng7MatBreadcrumbComponent, decorators: [{
            type: Component,
            args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'app-ng7-mat-breadcrumb',
                    templateUrl: './ng7-mat-breadcrumb.component.html',
                    styleUrls: ['./ng7-mat-breadcrumb.component.css']
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.Ng7MatBreadcrumbService }]; }, propDecorators: { bgColor: [{
                type: Input
            }], fontSize: [{
                type: Input
            }], fontColor: [{
                type: Input
            }], lastLinkColor: [{
                type: Input
            }], symbol: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,