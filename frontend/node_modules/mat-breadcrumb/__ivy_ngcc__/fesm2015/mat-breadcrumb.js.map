{"version":3,"file":"mat-breadcrumb.js","sources":["mat-breadcrumb/lib/mat-breadcrumb.service.ts","mat-breadcrumb/lib/mat-breadcrumb.component.ts","mat-breadcrumb/lib/mat-breadcrumb.module.ts","mat-breadcrumb/public-api.ts","mat-breadcrumb/mat-breadcrumb.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOa,oBAAoB,GAAjC,MAAa,oBAAoB;AAEjC,IAGE;AAAiB,QAHV,qBAAgB,GAA2B,IAAI,eAAe,CAAQ,EAAE,CAAC,CAAC;AAClF,QAAQ,kBAAa,GAAkC,IAAI,eAAe,CAAe,EAAE,CAAC,CAAC;AAE9F,KAAmB;AAEnB,IAAE,sBAAsB,CAAC,MAAW;AACnC,QAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtC,KAAE;AAEH,IAAE,gBAAgB,CAAC,aAA2B;AAC7C,QAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC1C,KAAE;AAEH;mHACC;AACA,8LAAD;AAAC;AAjBY,oBAAoB,qBAHhC,UAAU,CAAC,pDAoBV,ICEW,sBAAsB,GAAnC,MAAa,sBAAsB;EDrBjC,UAAU,EAAE,MAAM,OACnB,CAAC,KACW,oBAAoB,CAgBhC,tDCGsC,IAUrC,YACU,cAA8B,EAC9B,MAAc,EACd,uBAA6C;AACrD,QAHQ,mBAAc,GAAd,cAAc,CAAgB;AAC1C,QAAY,WAAM,GAAN,MAAM,CAAQ;AAC1B,QAAY,4BAAuB,GAAvB,uBAAuB,CAAsB;AACxD,QAZC,eAAU,GAAiB,EAAE,CAAC;AAC/B,QAAU,YAAO,GAAG,MAAM,CAAC;AAC3B,QAAU,aAAQ,GAAG,MAAM,CAAC;AAC5B,QAAU,cAAS,GAAG,SAAS,CAAC;AAChC,QAAU,kBAAa,GAAG,MAAM,CAAC;AACjC,QAAU,WAAM,GAAG,KAAK,CAAC;AACzB,QAOG,IAAI,CAAC,cAAc,EAAE,CAAC;AACzB,KAAE;AAEH,IAAE,QAAQ;AACT,QAAG,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,SAAS;AACrE,YAAK,KAAK,MAAM,KAAK,IAAI,SAAS,EAAE;AACpC,gBAAO,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AAC5C,oBAAS,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK;AACnC,wBAAW,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AACnE,wBAAW,IAAI,WAAW,EAAE;AAC5B,4BAAa,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;AACnD,gCAAe,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACpD,gCAAe,IAAI,UAAU,KAAK,KAAK,EAAE;AACzC,oCAAiB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,EAAE,WAAW,CAAC,CAAC;AAC1F,iCAAgB;AAChB,6BAAc;AACd,yBAAY;AACZ,qBAAU,CAAC,CAAC;AACZ,iBAAQ;AACR,aAAM;AACN,SAAI,CAAC,CAAC;AAEP,QAAI,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,UAAwB;AACjF,YAAK,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;AACtD,SAAI,CAAC,CAAC;AACN,KAAE;AAEH,IAAE,cAAc;AAAM,QAClB,IAAI,CAAC,MAAM,CAAC,MAAM;AACrB,aAAM,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,YAAY,aAAa,CAAC,CAAC;AAC3D,aAAM,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,CAAC;AAC1C,aAAM,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK;AACrB,YAAO,OAAO,KAAK,CAAC,UAAU,EAAE;AAAG,gBAAD,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC;AAAE,aAAA;AAC7D,YAAO,OAAO,KAAK,CAAC;AACpB,SAAM,CAAC,CAAC;AACR,aAAM,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,cAAc,CAAC,CAAC;AAC5D,aAAM,SAAS,CAAC,KAAK;AACrB,YAAO,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC3C,YAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACpC,SAAM,CAAC,CAAC;AACR,KAAE;AAEH,IAAU,UAAU,CAAC,KAAK,EAAE,aAAa;AAAK,QAC1C,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,IAAI,aAAa,EAAE;AACxD,YAAK,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;AAClG,YAAK,MAAM,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3D,YAAK,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK;AAE3B,gBAAQ,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC9C,gBAAO,KAAK,MAAM,KAAK,IAAI,SAAS,EAAE;AACtC,oBAAS,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAClC,wBAAW,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAClD,wBAAW,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtD,wBAAW,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,OAAO,EAAE,EAAE,aAAa,CAAC,CAAC;AACvE,qBAAU;AACV,iBAAQ;AAET,gBAAQ,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAC/D,gBAAO,IAAI,WAAW,EAAE;AACxB,oBAAS,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;AAC/C,wBAAW,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAChE,wBAAW,IAAI,aAAa,EAAE;AAC9B,4BAAa,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,EAAE,aAAa,CAAC,CAAC;AACxF,yBAAY;AAAE,6BAAI;AAClB,yBAAY;AACZ,qBAAU;AACV,iBAAQ;AAET,aAAO,CAAC,CAAC;AACR,YAAK,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAClC,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAC1B,SAAI;AACJ,KAAE;AAEH;;;;;;;;;;saAEC;AACA;AAAiD,YAlFtB,cAAc;AACvC,YAAiB,MAAM;AACvB,YAAkC,oBAAoB;AACtD;AAXQ;AAAc,IAAtB,KAAK,EAAE;AAAE,uDAAgB;AACjB;AAAc,IAAtB,KAAK,EAAE;AAAE,wDAAiB;AAClB;AAAc,IAAtB,KAAK,EAAE;AAAE,yDAAqB;AACtB;AAAc,IAAtB,KAAK,EAAE;AAAE,6DAAsB;AACvB;AAAc,IAAtB,KAAK,EAAE;AAAE,sDAAc,CAsF1B;AAAC;AA7FY,sBAAsB,qBAnBlC,SAAS,CAAC,rDAgHT,IClGW,mBAAmB,GAAhC,MAAa,mBAAmB;AAAI,EAAA;MDblC,QAAQ,EAAE,oBAAoB,WAC9B,QAAQ,EAAE,xDCYC,mBAAmB,qBAX/B,QAAQ,CAAC,WACR,YAAY,EAAE,CAAC,sBAAsB,CAAC,WACtC;IAAO,EAAE,eACP,YAAY,eACZ,YAAY,eACZ;eAAuB,eACvB,gBAAgB,eAChB;SAAa,WACd;KACD,OAAO,EAAE,CAAC;WAAsB,CAAC,OAClC,CAAC,KACW;OAAmB,CAAI;;;;;;;;;;;;0CDEjC;;;;;IAEF,CAAC,KACW,sBAAsB,CA4FlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BChGD;AAAC;ACtBD;AACC;AACC;AAED;ACJD;AACC;AACC;AAED;AAAC;AACgD","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Breadcrumb } from './breadcrumb.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatBreadcrumbService {\n\n  public breadcrumbLabels: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  public newBreadcrumb: BehaviorSubject<Breadcrumb[]> = new BehaviorSubject<Breadcrumb[]>([]);\n\n  constructor() { }\n\n  updateBreadcrumbLabels(labels: any) {\n    this.breadcrumbLabels.next(labels);\n  }\n\n  updateBreadcrumb(newBreadcrumb: Breadcrumb[]) {\n    this.newBreadcrumb.next(newBreadcrumb);\n  }\n\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Breadcrumb } from './breadcrumb.model';\nimport { MatBreadcrumbService } from './mat-breadcrumb.service';\nimport { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET, RoutesRecognized } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { map, mergeMap } from 'rxjs/internal/operators';\n\n@Component({\n  selector: 'lib-mat-breadcrumb',\n  template: `\n  <mat-toolbar class=\"mat-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\n  <mat-list class=\"mat-bread-crumb-list\" *ngIf=\"breadcrumb.length\">\n      <mat-list-item>\n          <span class=\"mat-bread-crumb-spacer\">\n              <span *ngFor=\"let item of breadcrumb; let i = index\">\n                  <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" class=\"mat-bread-crumb-list-item\" [ngStyle]=\"{'font-size': fontSize}\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\n                  <span *ngIf=\"!item?.url\" class=\"mat-bread-crumb-list-item\" [ngStyle]=\"{'font-size': fontSize}\"  [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\n                  <span *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\n              </span>\n          </span>\n      </mat-list-item>\n  </mat-list>\n</mat-toolbar>\n  `,\n  styleUrls: ['./mat-breadcrumb.component.css']\n})\nexport class MatBreadcrumbComponent implements OnInit {\n\n  breadcrumb: Breadcrumb[] = [];\n  @Input() bgColor = '#eee';\n  @Input() fontSize = '18px';\n  @Input() fontColor = '#0275d8';\n  @Input() lastLinkColor = '#000';\n  @Input() symbol = ' / ';\n  params: { [key: string]: any; };\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private ng7MatBreadcrumbService: MatBreadcrumbService\n  ) {\n    this.breadCrumbData();\n  }\n\n  ngOnInit() {\n    this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {\n      for (const label in labelData) {\n        if (labelData.hasOwnProperty(label)) {\n          this.breadcrumb.map((crumb) => {\n            const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n            if (labelParams) {\n              for (const labelParam of labelParams) {\n                const dynamicData = labelData[label];\n                if (labelParam === label) {\n                  crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);\n                }\n              }\n            }\n          });\n        }\n      }\n    });\n\n    this.ng7MatBreadcrumbService.newBreadcrumb.subscribe((breadcrumb: Breadcrumb[]) => {\n      this.updateData(this.activatedRoute, breadcrumb);\n    });\n  }\n\n  breadCrumbData(): void {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .pipe(map(() => this.activatedRoute))\n      .pipe(map((route) => {\n        while (route.firstChild) { route = route.firstChild; }\n        return route;\n      }))\n      .pipe(filter(route => route.outlet === PRIMARY_OUTLET))\n      .subscribe(route => {\n        this.params = route.snapshot.params;\n        this.updateData(route, null);\n      });\n  }\n\n  private updateData(route, newBreadcrumb): void {\n    if (route.snapshot.data.breadcrumb || newBreadcrumb) {\n      const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;\n      const breadcrumb = (JSON.parse(JSON.stringify(data)));\n      breadcrumb.map((crumb) => {\n\n        const urlChunks = crumb.url.split('/');\n        for (const chunk of urlChunks) {\n          if (chunk.includes(':')) {\n            const paramID = chunk.replace(':', '');\n            const routerParamID = this.params[paramID];\n            crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);\n          }\n        }\n\n        const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n        if (labelParams) {\n          for (const labelParam of labelParams) {\n            const routerParamID = this.params[labelParam.trim()];\n            if (routerParamID) {\n              crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);\n            } else {\n            }\n          }\n        }\n\n      });\n      this.breadcrumb = breadcrumb;\n    } else {\n      this.breadcrumb = [];\n    }\n  }\n\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { MatBreadcrumbComponent } from './mat-breadcrumb.component';\n\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatListModule } from '@angular/material/list';\n\n\n@NgModule({\n  declarations: [MatBreadcrumbComponent],\n  imports: [\n    RouterModule,\n    CommonModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatListModule\n  ],\n  exports: [MatBreadcrumbComponent]\n})\nexport class MatBreadcrumbModule { }\n","/*\n * Public API Surface of mat-breadcrumb\n */\n\nexport * from './lib/mat-breadcrumb.service';\nexport * from './lib/mat-breadcrumb.component';\nexport * from './lib/mat-breadcrumb.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}