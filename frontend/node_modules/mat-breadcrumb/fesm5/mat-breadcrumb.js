import { __decorate, __values } from 'tslib';
import { ɵɵdefineInjectable, Injectable, Input, Component, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NavigationEnd, PRIMARY_OUTLET, ActivatedRoute, Router, RouterModule } from '@angular/router';
import { filter } from 'rxjs/operators';
import { map } from 'rxjs/internal/operators';
import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatListModule } from '@angular/material/list';

var MatBreadcrumbService = /** @class */ (function () {
    function MatBreadcrumbService() {
        this.breadcrumbLabels = new BehaviorSubject([]);
        this.newBreadcrumb = new BehaviorSubject([]);
    }
    MatBreadcrumbService.prototype.updateBreadcrumbLabels = function (labels) {
        this.breadcrumbLabels.next(labels);
    };
    MatBreadcrumbService.prototype.updateBreadcrumb = function (newBreadcrumb) {
        this.newBreadcrumb.next(newBreadcrumb);
    };
    MatBreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function MatBreadcrumbService_Factory() { return new MatBreadcrumbService(); }, token: MatBreadcrumbService, providedIn: "root" });
    MatBreadcrumbService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], MatBreadcrumbService);
    return MatBreadcrumbService;
}());

var MatBreadcrumbComponent = /** @class */ (function () {
    function MatBreadcrumbComponent(activatedRoute, router, ng7MatBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;
        this.breadcrumb = [];
        this.bgColor = '#eee';
        this.fontSize = '18px';
        this.fontColor = '#0275d8';
        this.lastLinkColor = '#000';
        this.symbol = ' / ';
        this.breadCrumbData();
    }
    MatBreadcrumbComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe(function (labelData) {
            var _loop_1 = function (label) {
                if (labelData.hasOwnProperty(label)) {
                    _this.breadcrumb.map(function (crumb) {
                        var e_1, _a;
                        var labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            try {
                                for (var labelParams_1 = (e_1 = void 0, __values(labelParams)), labelParams_1_1 = labelParams_1.next(); !labelParams_1_1.done; labelParams_1_1 = labelParams_1.next()) {
                                    var labelParam = labelParams_1_1.value;
                                    var dynamicData = labelData[label];
                                    if (labelParam === label) {
                                        crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);
                                    }
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (labelParams_1_1 && !labelParams_1_1.done && (_a = labelParams_1.return)) _a.call(labelParams_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                    });
                }
            };
            for (var label in labelData) {
                _loop_1(label);
            }
        });
        this.ng7MatBreadcrumbService.newBreadcrumb.subscribe(function (breadcrumb) {
            _this.updateData(_this.activatedRoute, breadcrumb);
        });
    };
    MatBreadcrumbComponent.prototype.breadCrumbData = function () {
        var _this = this;
        this.router.events
            .pipe(filter(function (event) { return event instanceof NavigationEnd; }))
            .pipe(map(function () { return _this.activatedRoute; }))
            .pipe(map(function (route) {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(function (route) { return route.outlet === PRIMARY_OUTLET; }))
            .subscribe(function (route) {
            _this.params = route.snapshot.params;
            _this.updateData(route, null);
        });
    };
    MatBreadcrumbComponent.prototype.updateData = function (route, newBreadcrumb) {
        var _this = this;
        if (route.snapshot.data.breadcrumb || newBreadcrumb) {
            var data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;
            var breadcrumb = (JSON.parse(JSON.stringify(data)));
            breadcrumb.map(function (crumb) {
                var e_2, _a, e_3, _b;
                var urlChunks = crumb.url.split('/');
                try {
                    for (var urlChunks_1 = __values(urlChunks), urlChunks_1_1 = urlChunks_1.next(); !urlChunks_1_1.done; urlChunks_1_1 = urlChunks_1.next()) {
                        var chunk = urlChunks_1_1.value;
                        if (chunk.includes(':')) {
                            var paramID = chunk.replace(':', '');
                            var routerParamID = _this.params[paramID];
                            crumb.url = crumb.url.replace(":" + paramID, routerParamID);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (urlChunks_1_1 && !urlChunks_1_1.done && (_a = urlChunks_1.return)) _a.call(urlChunks_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                if (labelParams) {
                    try {
                        for (var labelParams_2 = __values(labelParams), labelParams_2_1 = labelParams_2.next(); !labelParams_2_1.done; labelParams_2_1 = labelParams_2.next()) {
                            var labelParam = labelParams_2_1.value;
                            var routerParamID = _this.params[labelParam.trim()];
                            if (routerParamID) {
                                crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                            }
                            else {
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (labelParams_2_1 && !labelParams_2_1.done && (_b = labelParams_2.return)) _b.call(labelParams_2);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            });
            this.breadcrumb = breadcrumb;
        }
        else {
            this.breadcrumb = [];
        }
    };
    MatBreadcrumbComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: Router },
        { type: MatBreadcrumbService }
    ]; };
    __decorate([
        Input()
    ], MatBreadcrumbComponent.prototype, "bgColor", void 0);
    __decorate([
        Input()
    ], MatBreadcrumbComponent.prototype, "fontSize", void 0);
    __decorate([
        Input()
    ], MatBreadcrumbComponent.prototype, "fontColor", void 0);
    __decorate([
        Input()
    ], MatBreadcrumbComponent.prototype, "lastLinkColor", void 0);
    __decorate([
        Input()
    ], MatBreadcrumbComponent.prototype, "symbol", void 0);
    MatBreadcrumbComponent = __decorate([
        Component({
            selector: 'lib-mat-breadcrumb',
            template: "\n  <mat-toolbar class=\"mat-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\n  <mat-list class=\"mat-bread-crumb-list\" *ngIf=\"breadcrumb.length\">\n      <mat-list-item>\n          <span class=\"mat-bread-crumb-spacer\">\n              <span *ngFor=\"let item of breadcrumb; let i = index\">\n                  <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" class=\"mat-bread-crumb-list-item\" [ngStyle]=\"{'font-size': fontSize}\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\n                  <span *ngIf=\"!item?.url\" class=\"mat-bread-crumb-list-item\" [ngStyle]=\"{'font-size': fontSize}\"  [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\n                  <span *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\n              </span>\n          </span>\n      </mat-list-item>\n  </mat-list>\n</mat-toolbar>\n  ",
            styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"]
        })
    ], MatBreadcrumbComponent);
    return MatBreadcrumbComponent;
}());

var MatBreadcrumbModule = /** @class */ (function () {
    function MatBreadcrumbModule() {
    }
    MatBreadcrumbModule = __decorate([
        NgModule({
            declarations: [MatBreadcrumbComponent],
            imports: [
                RouterModule,
                CommonModule,
                BrowserAnimationsModule,
                MatToolbarModule,
                MatListModule
            ],
            exports: [MatBreadcrumbComponent]
        })
    ], MatBreadcrumbModule);
    return MatBreadcrumbModule;
}());

/*
 * Public API Surface of mat-breadcrumb
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MatBreadcrumbComponent, MatBreadcrumbModule, MatBreadcrumbService };
//# sourceMappingURL=mat-breadcrumb.js.map
