import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { MatBreadcrumbService } from './mat-breadcrumb.service';
import { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET, RoutesRecognized } from '@angular/router';
import { filter } from 'rxjs/operators';
import { map } from 'rxjs/internal/operators';
let MatBreadcrumbComponent = class MatBreadcrumbComponent {
    constructor(activatedRoute, router, ng7MatBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;
        this.breadcrumb = [];
        this.bgColor = '#eee';
        this.fontSize = '18px';
        this.fontColor = '#0275d8';
        this.lastLinkColor = '#000';
        this.symbol = ' / ';
        this.breadCrumbData();
    }
    ngOnInit() {
        this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {
            for (const label in labelData) {
                if (labelData.hasOwnProperty(label)) {
                    this.breadcrumb.map((crumb) => {
                        const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            for (const labelParam of labelParams) {
                                const dynamicData = labelData[label];
                                if (labelParam === label) {
                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);
                                }
                            }
                        }
                    });
                }
            }
        });
        this.ng7MatBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {
            this.updateData(this.activatedRoute, breadcrumb);
        });
    }
    breadCrumbData() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .pipe(map(() => this.activatedRoute))
            .pipe(map((route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))
            .subscribe(route => {
            this.params = route.snapshot.params;
            this.updateData(route, null);
        });
    }
    updateData(route, newBreadcrumb) {
        if (route.snapshot.data.breadcrumb || newBreadcrumb) {
            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;
            const breadcrumb = (JSON.parse(JSON.stringify(data)));
            breadcrumb.map((crumb) => {
                const urlChunks = crumb.url.split('/');
                for (const chunk of urlChunks) {
                    if (chunk.includes(':')) {
                        const paramID = chunk.replace(':', '');
                        const routerParamID = this.params[paramID];
                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                    }
                }
                const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                if (labelParams) {
                    for (const labelParam of labelParams) {
                        const routerParamID = this.params[labelParam.trim()];
                        if (routerParamID) {
                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                        }
                        else {
                        }
                    }
                }
            });
            this.breadcrumb = breadcrumb;
        }
        else {
            this.breadcrumb = [];
        }
    }
};
MatBreadcrumbComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: MatBreadcrumbService }
];
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "bgColor", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "fontSize", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "fontColor", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "lastLinkColor", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "symbol", void 0);
MatBreadcrumbComponent = __decorate([
    Component({
        selector: 'lib-mat-breadcrumb',
        template: `
  <mat-toolbar class="mat-bread-crumb" [ngStyle]="{'background-color': bgColor}">
  <mat-list class="mat-bread-crumb-list" *ngIf="breadcrumb.length">
      <mat-list-item>
          <span class="mat-bread-crumb-spacer">
              <span *ngFor="let item of breadcrumb; let i = index">
                  <a *ngIf="item?.url" [routerLink]="item?.url" class="mat-bread-crumb-list-item" [ngStyle]="{'font-size': fontSize}" [ngStyle]="{'color': fontColor}">{{ item.label }}</a>
                  <span *ngIf="!item?.url" class="mat-bread-crumb-list-item" [ngStyle]="{'font-size': fontSize}"  [ngStyle]="{'color': lastLinkColor}">{{ item.label }}</span>
                  <span *ngIf="breadcrumb.length !== i+1">{{symbol}}</span>
              </span>
          </span>
      </mat-list-item>
  </mat-list>
</mat-toolbar>
  `,
        styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"]
    })
], MatBreadcrumbComponent);
export { MatBreadcrumbComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWJyZWFkY3J1bWIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWF0LWJyZWFkY3J1bWIvIiwic291cmNlcyI6WyJsaWIvbWF0LWJyZWFkY3J1bWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUcsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQVksTUFBTSx5QkFBeUIsQ0FBQztBQXFCeEQsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFVakMsWUFDVSxjQUE4QixFQUM5QixNQUFjLEVBQ2QsdUJBQTZDO1FBRjdDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFzQjtRQVh2RCxlQUFVLEdBQWlCLEVBQUUsQ0FBQztRQUNyQixZQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxNQUFNLENBQUM7UUFDbEIsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixrQkFBYSxHQUFHLE1BQU0sQ0FBQztRQUN2QixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBUXRCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNwRSxLQUFLLE1BQU0sS0FBSyxJQUFJLFNBQVMsRUFBRTtn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OztHQWNUOztLQUVGLENBQUM7R0FDVyxzQkFBc0IsQ0E0RmxDO1NBNUZZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJy4vYnJlYWRjcnVtYi5tb2RlbCc7XG5pbXBvcnQgeyBNYXRCcmVhZGNydW1iU2VydmljZSB9IGZyb20gJy4vbWF0LWJyZWFkY3J1bWIuc2VydmljZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyLCBOYXZpZ2F0aW9uRW5kLCBQUklNQVJZX09VVExFVCwgUm91dGVzUmVjb2duaXplZCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBtYXAsIG1lcmdlTWFwIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItbWF0LWJyZWFkY3J1bWInLFxuICB0ZW1wbGF0ZTogYFxuICA8bWF0LXRvb2xiYXIgY2xhc3M9XCJtYXQtYnJlYWQtY3J1bWJcIiBbbmdTdHlsZV09XCJ7J2JhY2tncm91bmQtY29sb3InOiBiZ0NvbG9yfVwiPlxuICA8bWF0LWxpc3QgY2xhc3M9XCJtYXQtYnJlYWQtY3J1bWItbGlzdFwiICpuZ0lmPVwiYnJlYWRjcnVtYi5sZW5ndGhcIj5cbiAgICAgIDxtYXQtbGlzdC1pdGVtPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0LWJyZWFkLWNydW1iLXNwYWNlclwiPlxuICAgICAgICAgICAgICA8c3BhbiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBicmVhZGNydW1iOyBsZXQgaSA9IGluZGV4XCI+XG4gICAgICAgICAgICAgICAgICA8YSAqbmdJZj1cIml0ZW0/LnVybFwiIFtyb3V0ZXJMaW5rXT1cIml0ZW0/LnVybFwiIGNsYXNzPVwibWF0LWJyZWFkLWNydW1iLWxpc3QtaXRlbVwiIFtuZ1N0eWxlXT1cInsnZm9udC1zaXplJzogZm9udFNpemV9XCIgW25nU3R5bGVdPVwieydjb2xvcic6IGZvbnRDb2xvcn1cIj57eyBpdGVtLmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCIhaXRlbT8udXJsXCIgY2xhc3M9XCJtYXQtYnJlYWQtY3J1bWItbGlzdC1pdGVtXCIgW25nU3R5bGVdPVwieydmb250LXNpemUnOiBmb250U2l6ZX1cIiAgW25nU3R5bGVdPVwieydjb2xvcic6IGxhc3RMaW5rQ29sb3J9XCI+e3sgaXRlbS5sYWJlbCB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwiYnJlYWRjcnVtYi5sZW5ndGggIT09IGkrMVwiPnt7c3ltYm9sfX08L3NwYW4+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICA8L21hdC1saXN0LWl0ZW0+XG4gIDwvbWF0LWxpc3Q+XG48L21hdC10b29sYmFyPlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9tYXQtYnJlYWRjcnVtYi5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTWF0QnJlYWRjcnVtYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgYnJlYWRjcnVtYjogQnJlYWRjcnVtYltdID0gW107XG4gIEBJbnB1dCgpIGJnQ29sb3IgPSAnI2VlZSc7XG4gIEBJbnB1dCgpIGZvbnRTaXplID0gJzE4cHgnO1xuICBASW5wdXQoKSBmb250Q29sb3IgPSAnIzAyNzVkOCc7XG4gIEBJbnB1dCgpIGxhc3RMaW5rQ29sb3IgPSAnIzAwMCc7XG4gIEBJbnB1dCgpIHN5bWJvbCA9ICcgLyAnO1xuICBwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55OyB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSBuZzdNYXRCcmVhZGNydW1iU2VydmljZTogTWF0QnJlYWRjcnVtYlNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5icmVhZENydW1iRGF0YSgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5uZzdNYXRCcmVhZGNydW1iU2VydmljZS5icmVhZGNydW1iTGFiZWxzLnN1YnNjcmliZSgobGFiZWxEYXRhKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGxhYmVsIGluIGxhYmVsRGF0YSkge1xuICAgICAgICBpZiAobGFiZWxEYXRhLmhhc093blByb3BlcnR5KGxhYmVsKSkge1xuICAgICAgICAgIHRoaXMuYnJlYWRjcnVtYi5tYXAoKGNydW1iKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbFBhcmFtcyA9IGNydW1iLmxhYmVsLm1hdGNoKC9bXnt7XSsoPz1cXH19KS9nKTtcbiAgICAgICAgICAgIGlmIChsYWJlbFBhcmFtcykge1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxhYmVsUGFyYW0gb2YgbGFiZWxQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkeW5hbWljRGF0YSA9IGxhYmVsRGF0YVtsYWJlbF07XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsUGFyYW0gPT09IGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICBjcnVtYi5sYWJlbCA9IGNydW1iLmxhYmVsLnJlcGxhY2UoJ3t7JyArIGxhYmVsUGFyYW0gKyAnfX0nLCBkeW5hbWljRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMubmc3TWF0QnJlYWRjcnVtYlNlcnZpY2UubmV3QnJlYWRjcnVtYi5zdWJzY3JpYmUoKGJyZWFkY3J1bWI6IEJyZWFkY3J1bWJbXSkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVEYXRhKHRoaXMuYWN0aXZhdGVkUm91dGUsIGJyZWFkY3J1bWIpO1xuICAgIH0pO1xuICB9XG5cbiAgYnJlYWRDcnVtYkRhdGEoKTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzXG4gICAgICAucGlwZShmaWx0ZXIoZXZlbnQgPT4gZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSlcbiAgICAgIC5waXBlKG1hcCgoKSA9PiB0aGlzLmFjdGl2YXRlZFJvdXRlKSlcbiAgICAgIC5waXBlKG1hcCgocm91dGUpID0+IHtcbiAgICAgICAgd2hpbGUgKHJvdXRlLmZpcnN0Q2hpbGQpIHsgcm91dGUgPSByb3V0ZS5maXJzdENoaWxkOyB9XG4gICAgICAgIHJldHVybiByb3V0ZTtcbiAgICAgIH0pKVxuICAgICAgLnBpcGUoZmlsdGVyKHJvdXRlID0+IHJvdXRlLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQpKVxuICAgICAgLnN1YnNjcmliZShyb3V0ZSA9PiB7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcm91dGUuc25hcHNob3QucGFyYW1zO1xuICAgICAgICB0aGlzLnVwZGF0ZURhdGEocm91dGUsIG51bGwpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZURhdGEocm91dGUsIG5ld0JyZWFkY3J1bWIpOiB2b2lkIHtcbiAgICBpZiAocm91dGUuc25hcHNob3QuZGF0YS5icmVhZGNydW1iIHx8IG5ld0JyZWFkY3J1bWIpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSByb3V0ZS5zbmFwc2hvdC5kYXRhLmJyZWFkY3J1bWIgPyByb3V0ZS5zbmFwc2hvdC5kYXRhLmJyZWFkY3J1bWIgOiBuZXdCcmVhZGNydW1iO1xuICAgICAgY29uc3QgYnJlYWRjcnVtYiA9IChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKSk7XG4gICAgICBicmVhZGNydW1iLm1hcCgoY3J1bWIpID0+IHtcblxuICAgICAgICBjb25zdCB1cmxDaHVua3MgPSBjcnVtYi51cmwuc3BsaXQoJy8nKTtcbiAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiB1cmxDaHVua3MpIHtcbiAgICAgICAgICBpZiAoY2h1bmsuaW5jbHVkZXMoJzonKSkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1JRCA9IGNodW5rLnJlcGxhY2UoJzonLCAnJyk7XG4gICAgICAgICAgICBjb25zdCByb3V0ZXJQYXJhbUlEID0gdGhpcy5wYXJhbXNbcGFyYW1JRF07XG4gICAgICAgICAgICBjcnVtYi51cmwgPSBjcnVtYi51cmwucmVwbGFjZShgOiR7cGFyYW1JRH1gLCByb3V0ZXJQYXJhbUlEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsYWJlbFBhcmFtcyA9IGNydW1iLmxhYmVsLm1hdGNoKC9bXnt7XSsoPz1cXH19KS9nKTtcbiAgICAgICAgaWYgKGxhYmVsUGFyYW1zKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBsYWJlbFBhcmFtIG9mIGxhYmVsUGFyYW1zKSB7XG4gICAgICAgICAgICBjb25zdCByb3V0ZXJQYXJhbUlEID0gdGhpcy5wYXJhbXNbbGFiZWxQYXJhbS50cmltKCldO1xuICAgICAgICAgICAgaWYgKHJvdXRlclBhcmFtSUQpIHtcbiAgICAgICAgICAgICAgY3J1bWIubGFiZWwgPSBjcnVtYi5sYWJlbC5yZXBsYWNlKCd7eycgKyBsYWJlbFBhcmFtICsgJ319Jywgcm91dGVyUGFyYW1JRCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYnJlYWRjcnVtYiA9IGJyZWFkY3J1bWI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnJlYWRjcnVtYiA9IFtdO1xuICAgIH1cbiAgfVxuXG5cblxufVxuIl19