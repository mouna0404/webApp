import { __decorate } from 'tslib';
import { ɵɵdefineInjectable, Injectable, Input, Component, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NavigationEnd, PRIMARY_OUTLET, ActivatedRoute, Router, RouterModule } from '@angular/router';
import { filter } from 'rxjs/operators';
import { map } from 'rxjs/internal/operators';
import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatListModule } from '@angular/material/list';

let MatBreadcrumbService = class MatBreadcrumbService {
    constructor() {
        this.breadcrumbLabels = new BehaviorSubject([]);
        this.newBreadcrumb = new BehaviorSubject([]);
    }
    updateBreadcrumbLabels(labels) {
        this.breadcrumbLabels.next(labels);
    }
    updateBreadcrumb(newBreadcrumb) {
        this.newBreadcrumb.next(newBreadcrumb);
    }
};
MatBreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function MatBreadcrumbService_Factory() { return new MatBreadcrumbService(); }, token: MatBreadcrumbService, providedIn: "root" });
MatBreadcrumbService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], MatBreadcrumbService);

let MatBreadcrumbComponent = class MatBreadcrumbComponent {
    constructor(activatedRoute, router, ng7MatBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;
        this.breadcrumb = [];
        this.bgColor = '#eee';
        this.fontSize = '18px';
        this.fontColor = '#0275d8';
        this.lastLinkColor = '#000';
        this.symbol = ' / ';
        this.breadCrumbData();
    }
    ngOnInit() {
        this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {
            for (const label in labelData) {
                if (labelData.hasOwnProperty(label)) {
                    this.breadcrumb.map((crumb) => {
                        const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            for (const labelParam of labelParams) {
                                const dynamicData = labelData[label];
                                if (labelParam === label) {
                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);
                                }
                            }
                        }
                    });
                }
            }
        });
        this.ng7MatBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {
            this.updateData(this.activatedRoute, breadcrumb);
        });
    }
    breadCrumbData() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .pipe(map(() => this.activatedRoute))
            .pipe(map((route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))
            .subscribe(route => {
            this.params = route.snapshot.params;
            this.updateData(route, null);
        });
    }
    updateData(route, newBreadcrumb) {
        if (route.snapshot.data.breadcrumb || newBreadcrumb) {
            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;
            const breadcrumb = (JSON.parse(JSON.stringify(data)));
            breadcrumb.map((crumb) => {
                const urlChunks = crumb.url.split('/');
                for (const chunk of urlChunks) {
                    if (chunk.includes(':')) {
                        const paramID = chunk.replace(':', '');
                        const routerParamID = this.params[paramID];
                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                    }
                }
                const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                if (labelParams) {
                    for (const labelParam of labelParams) {
                        const routerParamID = this.params[labelParam.trim()];
                        if (routerParamID) {
                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                        }
                        else {
                        }
                    }
                }
            });
            this.breadcrumb = breadcrumb;
        }
        else {
            this.breadcrumb = [];
        }
    }
};
MatBreadcrumbComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: MatBreadcrumbService }
];
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "bgColor", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "fontSize", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "fontColor", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "lastLinkColor", void 0);
__decorate([
    Input()
], MatBreadcrumbComponent.prototype, "symbol", void 0);
MatBreadcrumbComponent = __decorate([
    Component({
        selector: 'lib-mat-breadcrumb',
        template: `
  <mat-toolbar class="mat-bread-crumb" [ngStyle]="{'background-color': bgColor}">
  <mat-list class="mat-bread-crumb-list" *ngIf="breadcrumb.length">
      <mat-list-item>
          <span class="mat-bread-crumb-spacer">
              <span *ngFor="let item of breadcrumb; let i = index">
                  <a *ngIf="item?.url" [routerLink]="item?.url" class="mat-bread-crumb-list-item" [ngStyle]="{'font-size': fontSize}" [ngStyle]="{'color': fontColor}">{{ item.label }}</a>
                  <span *ngIf="!item?.url" class="mat-bread-crumb-list-item" [ngStyle]="{'font-size': fontSize}"  [ngStyle]="{'color': lastLinkColor}">{{ item.label }}</span>
                  <span *ngIf="breadcrumb.length !== i+1">{{symbol}}</span>
              </span>
          </span>
      </mat-list-item>
  </mat-list>
</mat-toolbar>
  `,
        styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"]
    })
], MatBreadcrumbComponent);

let MatBreadcrumbModule = class MatBreadcrumbModule {
};
MatBreadcrumbModule = __decorate([
    NgModule({
        declarations: [MatBreadcrumbComponent],
        imports: [
            RouterModule,
            CommonModule,
            BrowserAnimationsModule,
            MatToolbarModule,
            MatListModule
        ],
        exports: [MatBreadcrumbComponent]
    })
], MatBreadcrumbModule);

/*
 * Public API Surface of mat-breadcrumb
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MatBreadcrumbComponent, MatBreadcrumbModule, MatBreadcrumbService };
//# sourceMappingURL=mat-breadcrumb.js.map
